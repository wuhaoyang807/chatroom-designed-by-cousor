2025-05-17 11:41:22,957 [DEBUG] 初始化主窗口: 用户=why
2025-05-17 11:41:22,957 [DEBUG] 创建客户端线程
2025-05-17 11:41:22,958 [DEBUG] 客户端线程初始化
2025-05-17 11:41:22,958 [DEBUG] 开始初始化UDP音频服务
2025-05-17 11:41:22,958 [DEBUG] 分配随机UDP端口: 52590
2025-05-17 11:41:22,958 [DEBUG] 客户端线程开始运行
2025-05-17 11:41:22,959 [DEBUG] 尝试绑定UDP端口: 52590
2025-05-17 11:41:22,959 [DEBUG] UDP端口绑定成功: 52590
2025-05-17 11:41:22,959 [DEBUG] 创建UDP音频线程，端口: 52590
2025-05-17 11:41:22,960 [DEBUG] UDP音频线程启动成功
2025-05-17 11:41:22,960 [DEBUG] 发送UDP端口更新消息: UDP_PORT_UPDATE|why|52590
2025-05-17 11:41:22,961 [DEBUG] UDP音频服务初始化完成，端口: 52590
2025-05-17 11:41:22,981 [DEBUG] 初始化UI
2025-05-17 11:41:22,984 [DEBUG] 初始刷新好友和群组列表
2025-05-17 11:41:22,985 [DEBUG] 主窗口初始化完成，用户: why, UDP端口: 52590
2025-05-17 11:41:23,029 [DEBUG] 处理收到的消息: FRIEND_LIST|why_1:offline
2025-05-17 11:41:23,029 [DEBUG] 处理收到的消息: GROUP_LIST|1:first_grop|2:second_grop|3:third_grop|4:4
2025-05-17 11:41:26,319 [DEBUG] 处理收到的消息: PRIVATE_HISTORY|why_1|1|why_1|[EMOJI]smart.png|why_1|[EMOJI]gif4.gif|why_1|[EMOJI]gif4.gif|why_1|[EMOJI]smart.png|why_1|[EMOJI]facepalm.png|why_1|[EMOJI]gif4.gif|why|1|why_1|[EMOJI]smirk.png|why|1|why_1|2|why_1|[EMOJI]smirk.png|why_1|[EMOJI]gif4.gif|why_1|[EMOJI]gif4.gif|why|[EMOJI]smart.png|why|[EMOJI]image_emoticon6.png|why|[EMOJI]image_emoticon6.png|why|[EMOJI]gif4.gif|why_1|[EMOJI]image_emoticon19.png|why|[EMOJI]gif4.gif
2025-05-17 11:41:26,359 [DEBUG] 处理收到的消息: FILE_LIST|2022级通信工程专业学生绩点及排名公示-截至2025年3月17日.pdf|main1.py
2025-05-17 11:41:47,156 [DEBUG] 处理收到的消息: FRIEND_ONLINE|why_1
2025-05-17 11:41:55,454 [DEBUG] 处理收到的消息: FILE_LIST|2022级通信工程专业学生绩点及排名公示-截至2025年3月17日.pdf|ConFuzzius_A_Data_Dependency-Aware_Hybrid_Fuzzer_for_Smart_Contracts.pdf|main1.py
2025-05-17 11:41:59,792 [DEBUG] 处理收到的消息: FILE_DATA|main1.py|41009
2025-05-17 11:42:00,798 [ERROR] 处理消息时出错: timed out, 消息内容: FILE_DATA|main1.py|41009
Traceback (most recent call last):
  File "D:\OneDrive\Desktop\cursor_try_chat_app\client\main.py", line 1507, in on_message
    chunk = self.sock.recv(min(4096, filesize - len(filedata)))
socket.timeout: timed out
2025-05-17 11:42:00,800 [DEBUG] 处理收到的消息: import sys
2025-05-17 11:42:00,800 [DEBUG] 处理收到的消息: import socket
2025-05-17 11:42:00,800 [DEBUG] 处理收到的消息: from PyQt5.QtWidgets import (QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, QPushButton, QTextEdit,
2025-05-17 11:42:00,801 [DEBUG] 处理收到的消息:                              QListWidget, QMessageBox, QInputDialog, QListWidgetItem, QTabWidget)
2025-05-17 11:42:00,801 [DEBUG] 处理收到的消息: from PyQt5.QtCore import Qt, QThread, pyqtSignal, QTimer
2025-05-17 11:42:00,801 [DEBUG] 处理收到的消息: from PyQt5.QtGui import QIcon, QPixmap, QMovie, QColor
2025-05-17 11:42:00,801 [DEBUG] 处理收到的消息: import os
2025-05-17 11:42:00,802 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,802 [DEBUG] 处理收到的消息: # 服务器配置
2025-05-17 11:42:00,802 [DEBUG] 处理收到的消息: SERVER_HOST = '127.0.0.1'
2025-05-17 11:42:00,802 [DEBUG] 处理收到的消息: SERVER_PORT = 12345
2025-05-17 11:42:00,803 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,803 [DEBUG] 处理收到的消息: EMOJI_DIR = os.path.join(os.path.dirname(__file__), 'resources')
2025-05-17 11:42:00,803 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,803 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,803 [DEBUG] 处理收到的消息: class ClientThread(QThread):
2025-05-17 11:42:00,803 [DEBUG] 处理收到的消息:     message_received = pyqtSignal(str)
2025-05-17 11:42:00,803 [DEBUG] 处理收到的消息:     connection_lost = pyqtSignal()
2025-05-17 11:42:00,803 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,803 [DEBUG] 处理收到的消息:     def __init__(self, sock):
2025-05-17 11:42:00,803 [DEBUG] 处理收到的消息:         super().__init__()
2025-05-17 11:42:00,804 [DEBUG] 处理收到的消息:         self.sock = sock
2025-05-17 11:42:00,804 [DEBUG] 处理收到的消息:         self.running = True
2025-05-17 11:42:00,804 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,804 [DEBUG] 处理收到的消息:     def run(self):
2025-05-17 11:42:00,804 [DEBUG] 处理收到的消息:         while self.running:
2025-05-17 11:42:00,804 [DEBUG] 处理收到的消息:             try:
2025-05-17 11:42:00,804 [DEBUG] 处理收到的消息:                 data = self.sock.recv(4096)
2025-05-17 11:42:00,804 [DEBUG] 处理收到的消息:                 if not data:
2025-05-17 11:42:00,804 [DEBUG] 处理收到的消息:                     print("服务器连接断开")
2025-05-17 11:42:00,804 [DEBUG] 处理收到的消息:                     self.connection_lost.emit()
2025-05-17 11:42:00,804 [DEBUG] 处理收到的消息:                     break
2025-05-17 11:42:00,805 [DEBUG] 处理收到的消息:                 self.message_received.emit(data.decode('utf-8'))
2025-05-17 11:42:00,805 [DEBUG] 处理收到的消息:             except ConnectionResetError:
2025-05-17 11:42:00,805 [DEBUG] 处理收到的消息:                 print("连接被重置")
2025-05-17 11:42:00,805 [DEBUG] 处理收到的消息:                 self.connection_lost.emit()
2025-05-17 11:42:00,805 [DEBUG] 处理收到的消息:                 break
2025-05-17 11:42:00,805 [DEBUG] 处理收到的消息:             except Exception as e:
2025-05-17 11:42:00,805 [DEBUG] 处理收到的消息:                 print(f"接收消息出错: {e}")
2025-05-17 11:42:00,805 [DEBUG] 处理收到的消息:                 self.connection_lost.emit()
2025-05-17 11:42:00,805 [DEBUG] 处理收到的消息:                 break
2025-05-17 11:42:00,805 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,805 [DEBUG] 处理收到的消息:     def stop(self):
2025-05-17 11:42:00,805 [DEBUG] 处理收到的消息:         self.running = False
2025-05-17 11:42:00,805 [DEBUG] 处理收到的消息:         self.quit()
2025-05-17 11:42:00,806 [DEBUG] 处理收到的消息:         self.wait()
2025-05-17 11:42:00,806 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,806 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,806 [DEBUG] 处理收到的消息: def excepthook(type, value, traceback):
2025-05-17 11:42:00,806 [DEBUG] 处理收到的消息:     QMessageBox.critical(None, '未捕获异常', str(value))
2025-05-17 11:42:00,806 [DEBUG] 处理收到的消息:     sys.__excepthook__(type, value, traceback)
2025-05-17 11:42:00,806 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,806 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,806 [DEBUG] 处理收到的消息: sys.excepthook = excepthook
2025-05-17 11:42:00,806 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,807 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,807 [DEBUG] 处理收到的消息: class LoginWindow(QWidget):
2025-05-17 11:42:00,807 [DEBUG] 处理收到的消息:     def __init__(self):
2025-05-17 11:42:00,807 [DEBUG] 处理收到的消息:         super().__init__()
2025-05-17 11:42:00,807 [DEBUG] 处理收到的消息:         self.setWindowTitle('登录/注册')
2025-05-17 11:42:00,807 [DEBUG] 处理收到的消息:         self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
2025-05-17 11:42:00,807 [DEBUG] 处理收到的消息:         try:
2025-05-17 11:42:00,807 [DEBUG] 处理收到的消息:             self.sock.connect((SERVER_HOST, SERVER_PORT))
2025-05-17 11:42:00,807 [DEBUG] 处理收到的消息:         except Exception as e:
2025-05-17 11:42:00,807 [DEBUG] 处理收到的消息:             QMessageBox.critical(self, '错误', f'无法连接服务器: {e}')
2025-05-17 11:42:00,807 [DEBUG] 处理收到的消息:             sys.exit(1)
2025-05-17 11:42:00,807 [DEBUG] 处理收到的消息:         self.init_ui()
2025-05-17 11:42:00,808 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,808 [DEBUG] 处理收到的消息:     def init_ui(self):
2025-05-17 11:42:00,808 [DEBUG] 处理收到的消息:         layout = QVBoxLayout()
2025-05-17 11:42:00,808 [DEBUG] 处理收到的消息:         self.user_edit = QLineEdit()
2025-05-17 11:42:00,808 [DEBUG] 处理收到的消息:         self.user_edit.setPlaceholderText('用户名')
2025-05-17 11:42:00,808 [DEBUG] 处理收到的消息:         self.pwd_edit = QLineEdit()
2025-05-17 11:42:00,808 [DEBUG] 处理收到的消息:         self.pwd_edit.setPlaceholderText('密码')
2025-05-17 11:42:00,808 [DEBUG] 处理收到的消息:         self.pwd_edit.setEchoMode(QLineEdit.Password)
2025-05-17 11:42:00,808 [DEBUG] 处理收到的消息:         self.login_btn = QPushButton('登录')
2025-05-17 11:42:00,808 [DEBUG] 处理收到的消息:         self.reg_btn = QPushButton('注册')
2025-05-17 11:42:00,808 [DEBUG] 处理收到的消息:         self.login_btn.clicked.connect(self.login)
2025-05-17 11:42:00,809 [DEBUG] 处理收到的消息:         self.reg_btn.clicked.connect(self.register)
2025-05-17 11:42:00,809 [DEBUG] 处理收到的消息:         layout.addWidget(QLabel('用户名:'))
2025-05-17 11:42:00,809 [DEBUG] 处理收到的消息:         layout.addWidget(self.user_edit)
2025-05-17 11:42:00,809 [DEBUG] 处理收到的消息:         layout.addWidget(QLabel('密码:'))
2025-05-17 11:42:00,809 [DEBUG] 处理收到的消息:         layout.addWidget(self.pwd_edit)
2025-05-17 11:42:00,809 [DEBUG] 处理收到的消息:         btn_layout = QHBoxLayout()
2025-05-17 11:42:00,809 [DEBUG] 处理收到的消息:         btn_layout.addWidget(self.login_btn)
2025-05-17 11:42:00,809 [DEBUG] 处理收到的消息:         btn_layout.addWidget(self.reg_btn)
2025-05-17 11:42:00,809 [DEBUG] 处理收到的消息:         layout.addLayout(btn_layout)
2025-05-17 11:42:00,809 [DEBUG] 处理收到的消息:         self.setLayout(layout)
2025-05-17 11:42:00,809 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,809 [DEBUG] 处理收到的消息:     def login(self):
2025-05-17 11:42:00,810 [DEBUG] 处理收到的消息:         username = self.user_edit.text().strip()
2025-05-17 11:42:00,810 [DEBUG] 处理收到的消息:         password = self.pwd_edit.text().strip()
2025-05-17 11:42:00,810 [DEBUG] 处理收到的消息:         if not username or not password:
2025-05-17 11:42:00,810 [DEBUG] 处理收到的消息:             QMessageBox.warning(self, '提示', '请输入用户名和密码')
2025-05-17 11:42:00,810 [DEBUG] 处理收到的消息:             return
2025-05-17 11:42:00,810 [DEBUG] 处理收到的消息:         self.sock.send(f'LOGIN|{username}|{password}'.encode('utf-8'))
2025-05-17 11:42:00,810 [DEBUG] 处理收到的消息:         try:
2025-05-17 11:42:00,810 [DEBUG] 处理收到的消息:             resp = self.sock.recv(4096).decode('utf-8')
2025-05-17 11:42:00,810 [DEBUG] 处理收到的消息:         except Exception as e:
2025-05-17 11:42:00,810 [DEBUG] 处理收到的消息:             QMessageBox.critical(self, '错误', f'网络错误: {e}')
2025-05-17 11:42:00,810 [DEBUG] 处理收到的消息:             return
2025-05-17 11:42:00,810 [DEBUG] 处理收到的消息:         parts = resp.split('|', 2)
2025-05-17 11:42:00,811 [DEBUG] 处理收到的消息:         if parts[0] == 'LOGIN_RESULT' and parts[1] == 'OK':
2025-05-17 11:42:00,811 [DEBUG] 处理收到的消息:             self.accept_login(username)
2025-05-17 11:42:00,811 [DEBUG] 处理收到的消息:         else:
2025-05-17 11:42:00,811 [DEBUG] 处理收到的消息:             QMessageBox.warning(self, '登录失败', parts[2] if len(parts) > 2 else '未知错误')
2025-05-17 11:42:00,811 [DEBUG] 处理收到的消息:             self.show()  # 保证窗口不关闭
2025-05-17 11:42:00,811 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,811 [DEBUG] 处理收到的消息:     def register(self):
2025-05-17 11:42:00,811 [DEBUG] 处理收到的消息:         username = self.user_edit.text().strip()
2025-05-17 11:42:00,811 [DEBUG] 处理收到的消息:         password = self.pwd_edit.text().strip()
2025-05-17 11:42:00,811 [DEBUG] 处理收到的消息:         if not username or not password:
2025-05-17 11:42:00,811 [DEBUG] 处理收到的消息:             QMessageBox.warning(self, '提示', '请输入用户名和密码')
2025-05-17 11:42:00,811 [DEBUG] 处理收到的消息:             return
2025-05-17 11:42:00,812 [DEBUG] 处理收到的消息:         self.sock.se  group_input_layout.addWidget(self.group_anon_btn)
2025-05-17 11:42:00,812 [DEBUG] 处理收到的消息:         group_input_layout.addWidget(self.group_send_btn)
2025-05-17 11:42:00,812 [DEBUG] 处理收到的消息:         group_layout.addLayout(group_input_layout)
2025-05-17 11:42:00,812 [DEBUG] 处理收到的消息:         # 群成员显示
2025-05-17 11:42:00,812 [DEBUG] 处理收到的消息:         self.group_members_label = QLabel('群成员:')
2025-05-17 11:42:00,812 [DEBUG] 处理收到的消息:         self.group_members_list = QListWidget()
2025-05-17 11:42:00,812 [DEBUG] 处理收到的消息:         group_layout.addWidget(self.group_members_label)
2025-05-17 11:42:00,812 [DEBUG] 处理收到的消息:         group_layout.addWidget(self.group_members_list)
2025-05-17 11:42:00,812 [DEBUG] 处理收到的消息:         self.group_tab.setLayout(group_layout)
2025-05-17 11:42:00,812 [DEBUG] 处理收到的消息:         right_layout.addWidget(self.tab_widget)
2025-05-17 11:42:00,812 [DEBUG] 处理收到的消息:         main_layout.addLayout(left_layout, 1)
2025-05-17 11:42:00,812 [DEBUG] 处理收到的消息:         main_layout.addLayout(right_layout, 3)
2025-05-17 11:42:00,813 [DEBUG] 处理收到的消息:         self.setLayout(main_layout)
2025-05-17 11:42:00,813 [DEBUG] 处理收到的消息:         self.emoji_dialog = None
2025-05-17 11:42:00,813 [DEBUG] 处理收到的消息:         self.anon_nick = None
2025-05-17 11:42:00,813 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,813 [DEBUG] 处理收到的消息:     def get_friends(self):
2025-05-17 11:42:00,813 [DEBUG] 处理收到的消息:         try:
2025-05-17 11:42:00,813 [DEBUG] 处理收到的消息:             self.sock.send(f'GET_FRIENDS|{self.username}'.encode('utf-8'))
2025-05-17 11:42:00,813 [DEBUG] 处理收到的消息:         except Exception as e:
2025-05-17 11:42:00,813 [DEBUG] 处理收到的消息:             print(f"获取好友列表出错: {e}")
2025-05-17 11:42:00,813 [DEBUG] 处理收到的消息:             QMessageBox.warning(self, '网络错误', '获取好友列表失败，请检查网络连接')
2025-05-17 11:42:00,813 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,813 [DEBUG] 处理收到的消息:     def get_groups(self):
2025-05-17 11:42:00,814 [DEBUG] 处理收到的消息:         try:
2025-05-17 11:42:00,814 [DEBUG] 处理收到的消息:             self.sock.send(f'GET_GROUPS|{self.username}'.encode('utf-8'))
2025-05-17 11:42:00,814 [DEBUG] 处理收到的消息:             # 清空未读标记
2025-05-17 11:42:00,814 [DEBUG] 处理收到的消息:             self.unread_groups = set()
2025-05-17 11:42:00,814 [DEBUG] 处理收到的消息:         except Exception as e:
2025-05-17 11:42:00,814 [DEBUG] 处理收到的消息:             print(f"获取群聊列表出错: {e}")
2025-05-17 11:42:00,814 [DEBUG] 处理收到的消息:             QMessageBox.warning(self, '网络错误', '获取群聊列表失败，请检查网络连接')
2025-05-17 11:42:00,814 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,814 [DEBUG] 处理收到的消息:     def select_friend(self, item):
2025-05-17 11:42:00,814 [DEBUG] 处理收到的消息:         self.current_friend = item.text().split(' ')[0]
2025-05-17 11:42:00,814 [DEBUG] 处理收到的消息:         self.chat_display.clear()
2025-05-17 11:42:00,814 [DEBUG] 处理收到的消息:         self.append_text_message('', f'与 {self.current_friend} 的聊天：')
2025-05-17 11:42:00,815 [DEBUG] 处理收到的消息:         # 获取私聊历史记录
2025-05-17 11:42:00,815 [DEBUG] 处理收到的消息:         self.get_private_history()
2025-05-17 11:42:00,815 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,815 [DEBUG] 处理收到的消息:     def get_private_history(self):
2025-05-17 11:42:00,815 [DEBUG] 处理收到的消息:         """获取与当前好友的私聊历史记录"""
2025-05-17 11:42:00,815 [DEBUG] 处理收到的消息:         if not self.current_friend:
2025-05-17 11:42:00,815 [DEBUG] 处理收到的消息:             return
2025-05-17 11:42:00,815 [DEBUG] 处理收到的消息:         try:
2025-05-17 11:42:00,815 [DEBUG] 处理收到的消息:             self.sock.send(f'GET_PRIVATE_HISTORY|{self.username}|{self.current_friend}'.encode('utf-8'))
2025-05-17 11:42:00,815 [DEBUG] 处理收到的消息:         except Exception as e:
2025-05-17 11:42:00,815 [DEBUG] 处理收到的消息:             print(f"获取私聊历史记录出错: {e}")
2025-05-17 11:42:00,815 [DEBUG] 处理收到的消息:             self.append_text_message('[系统]', '获取聊天记录失败，请检查网络连接')
2025-05-17 11:42:00,816 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,816 [DEBUG] 处理收到的消息:     def add_friend(self):
2025-05-17 11:42:00,816 [DEBUG] 处理收到的消息:         friend, ok = QInputDialog.getText(self, '添加好友', '输入好友用户名:')
2025-05-17 11:42:00,816 [DEBUG] 处理收到的消息:         if ok and friend:
2025-05-17 11:42:00,816 [DEBUG] 处理收到的消息:             self.sock.send(f'ADD_FRIEND|{self.username}|{friend}'.encode('utf-8'))
2025-05-17 11:42:00,816 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,816 [DEBUG] 处理收到的消息:     def del_friend(self):
2025-05-17 11:42:00,816 [DEBUG] 处理收到的消息:         if not self.current_friend:
2025-05-17 11:42:00,816 [DEBUG] 处理收到的消息:             QMessageBox.warning(self, '提示', '请先选择要删除的好友')
2025-05-17 11:42:00,816 [DEBUG] 处理收到的消息:             return
2025-05-17 11:42:00,816 [DEBUG] 处理收到的消息:         self.sock.send(f'DEL_FRIEND|{self.username}|{self.current_friend}'.encode('utf-8'))
2025-05-17 11:42:00,817 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,817 [DEBUG] 处理收到的消息:     def append_text_message(self, sender, text, is_self=False):
2025-05-17 11:42:00,817 [DEBUG] 处理收到的消息:         label = QLabel()
2025-05-17 11:42:00,817 [DEBUG] 处理收到的消息:         label.setText(f'<b>{sender}:</b> {text}')
2025-05-17 11:42:00,817 [DEBUG] 处理收到的消息:         item = QListWidgetItem()
2025-05-17 11:42:00,817 [DEBUG] 处理收到的消息:         self.chat_display.addItem(item)
2025-05-17 11:42:00,817 [DEBUG] 处理收到的消息:         self.chat_display.setItemWidget(item, label)
2025-05-17 11:42:00,817 [DEBUG] 处理收到的消息:         item.setSizeHint(label.sizeHint())
2025-05-17 11:42:00,817 [DEBUG] 处理收到的消息:         if is_self:
2025-05-17 11:42:00,817 [DEBUG] 处理收到的消息:             label.setStyleSheet('color:blue;')
2025-05-17 11:42:00,817 [DEBUG] 处理收到的消息:         self.chat_display.scrollToBottom()
2025-05-17 11:42:00,817 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,818 [DEBUG] 处理收到的消息:     def append_emoji_message(self, sender, emoji_id):
2025-05-17 11:42:00,818 [DEBUG] 处理收到的消息:         widget = QWidget()
2025-05-17 11:42:00,818 [DEBUG] 处理收到的消息:         layout = QHBoxLayout()
2025-05-17 11:42:00,818 [DEBUG] 处理收到的消息:         layout.setContentsMargins(0, 0, 0, 0)
2025-05-17 11:42:00,818 [DEBUG] 处理收到的消息:         name_label = QLabel(f'<b>{sender}:</b>')
2025-05-17 11:42:00,818 [DEBUG] 处理收到的消息:         img_label = QLabel()
2025-05-17 11:42:00,818 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,818 [DEBUG] 处理收到的消息:         # 尝试从缓存获取表情
2025-05-17 11:42:00,818 [DEBUG] 处理收到的消息:         if not self.get_emoji_from_cache(emoji_id, img_label):
2025-05-17 11:42:00,818 [DEBUG] 处理收到的消息:             path = os.path.join(EMOJI_DIR, emoji_id)
2025-05-17 11:42:00,818 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,818 [DEBUG] 处理收到的消息:             # 添加路径检查
2025-05-17 11:42:00,819 [DEBUG] 处理收到的消息:             if not os.path.exists(path):
2025-05-17 11:42:00,819 [DEBUG] 处理收到的消息:                 print(f"表情文件不存在: {path}")
2025-05-17 11:42:00,819 [DEBUG] 处理收到的消息:                 img_label.setText(f"[表情: {emoji_id}]")
2025-05-17 11:42:00,819 [DEBUG] 处理收到的消息:             elif emoji_id.lower().endswith('.gif'):
2025-05-17 11:42:00,819 [DEBUG] 处理收到的消息:                 # 使用定时器确保GIF加载完成
2025-05-17 11:42:00,819 [DEBUG] 处理收到的消息:                 movie = QMovie(path)
2025-05-17 11:42:00,819 [DEBUG] 处理收到的消息:                 img_label.setMovie(movie)
2025-05-17 11:42:00,819 [DEBUG] 处理收到的消息:                 movie.setCacheMode(QMovie.CacheAll)
2025-05-17 11:42:00,819 [DEBUG] 处理收到的消息:                 movie.start()
2025-05-17 11:42:00,819 [DEBUG] 处理收到的消息:                 # 强制处理事件以确保显示更新
2025-05-17 11:42:00,819 [DEBUG] 处理收到的消息:                 QApplication.processEvents()
2025-05-17 11:42:00,819 [DEBUG] 处理收到的消息:             else:
2025-05-17 11:42:00,819 [DEBUG] 处理收到的消息:                 # 静态图片加载
2025-05-17 11:42:00,820 [DEBUG] 处理收到的消息:                 pix = QPixmap(path)
2025-05-17 11:42:00,820 [DEBUG] 处理收到的消息:                 if pix.isNull():
2025-05-17 11:42:00,820 [DEBUG] 处理收到的消息:                     # 如果加载失败，尝试重新加载
2025-05-17 11:42:00,820 [DEBUG] 处理收到的消息:                     print(f"表情加载失败，尝试重新加载: {emoji_id}")
2025-05-17 11:42:00,820 [DEBUG] 处理收到的消息:                     pix = QPixmap(path)
2025-05-17 11:42:00,820 [DEBUG] 处理收到的消息:                 img_label.setPixmap(pix.scaled(40, 40, Qt.KeepAspectRatio, Qt.SmoothTransformation))
2025-05-17 11:42:00,820 [DEBUG] 处理收到的消息:                 # 强制处理事件以确保显示更新
2025-05-17 11:42:00,820 [DEBUG] 处理收到的消息:                 QApplication.processEvents()
2025-05-17 11:42:00,820 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,820 [DEBUG] 处理收到的消息:         layout.addWidget(name_label)
2025-05-17 11:42:00,820 [DEBUG] 处理收到的消息:         layout.addWidget(img_label)
2025-05-17 11:42:00,820 [DEBUG] 处理收到的消息:         widget.setLayout(layout)
2025-05-17 11:42:00,821 [DEBUG] 处理收到的消息:         item = QListWidgetItem()
2025-05-17 11:42:00,821 [DEBUG] 处理收到的消息:         self.chat_display.addItem(item)
2025-05-17 11:42:00,821 [DEBUG] 处理收到的消息:         self.chat_display.setItemWidget(item, widget)
2025-05-17 11:42:00,821 [DEBUG] 处理收到的消息:         item.setSizeHint(widget.sizeHint())
2025-05-17 11:42:00,821 [DEBUG] 处理收到的消息:         self.chat_display.scrollToBottom()
2025-05-17 11:42:00,821 [DEBUG] 处理收到的消息:         # 强制刷新UI
2025-05-17 11:42:00,821 [DEBUG] 处理收到的消息:         self.chat_display.repaint()
2025-05-17 11:42:00,821 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,821 [DEBUG] 处理收到的消息:     def send_message(self):
2025-05-17 11:42:00,821 [DEBUG] 处理收到的消息:         msg = self.input_edit.text().strip()
2025-05-17 11:42:00,821 [DEBUG] 处理收到的消息:         if not msg or not self.current_friend:
2025-05-17 11:42:00,822 [DEBUG] 处理收到的消息:             return
2025-05-17 11:42:00,822 [DEBUG] 处理收到的消息:         self.sock.send(f'MSG|{self.current_friend}|{msg}'.encode('utf-8'))
2025-05-17 11:42:00,822 [DEBUG] 处理收到的消息:         self.input_edit.clear()
2025-05-17 11:42:00,822 [DEBUG] 处理收到的消息:         self.append_text_message('我', msg, is_self=True)
2025-05-17 11:42:00,822 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,822 [DEBUG] 处理收到的消息:     def open_emoji_dialog(self):
2025-05-17 11:42:00,822 [DEBUG] 处理收到的消息:         if self.emoji_dialog is None:
2025-05-17 11:42:00,822 [DEBUG] 处理收到的消息:             self.emoji_dialog = EmojiDialog()
2025-05-17 11:42:00,822 [DEBUG] 处理收到的消息:             self.emoji_dialog.emoji_selected.connect(self.handle_emoji_selected)
2025-05-17 11:42:00,822 [DEBUG] 处理收到的消息:         self.emoji_dialog.show()
2025-05-17 11:42:00,822 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,822 [DEBUG] 处理收到的消息:     def handle_emoji_selected(self, emoji_id):
2025-05-17 11:42:00,823 [DEBUG] 处理收到的消息:         if self.tab_widget.currentWidget() == self.private_tab:
2025-05-17 11:42:00,823 [DEBUG] 处理收到的消息:             self.send_emoji(emoji_id)
2025-05-17 11:42:00,823 [DEBUG] 处理收到的消息:         else:
2025-05-17 11:42:00,823 [DEBUG] 处理收到的消息:             self.send_group_emoji(emoji_id)
2025-05-17 11:42:00,823 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,823 [DEBUG] 处理收到的消息:     def send_emoji(self, emoji_id):
2025-05-17 11:42:00,823 [DEBUG] 处理收到的消息:         if not self.current_friend:
2025-05-17 11:42:00,823 [DEBUG] 处理收到的消息:             return
2025-05-17 11:42:00,823 [DEBUG] 处理收到的消息:         self.sock.send(f'EMOJI|{self.current_friend}|{emoji_id}'.encode('utf-8'))
2025-05-17 11:42:00,823 [DEBUG] 处理收到的消息:         self.append_emoji_message('我', emoji_id)
2025-05-17 11:42:00,823 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,823 [DEBUG] 处理收到的消息:     def select_group(self, item):
2025-05-17 11:42:00,824 [DEBUG] 处理收到的消息:         if self.selecting_group:
2025-05-17 11:42:00,824 [DEBUG] 处理收到的消息:             return
2025-05-17 11:42:00,824 [DEBUG] 处理收到的消息:         self.selecting_group = True
2025-05-17 11:42:00,824 [DEBUG] 处理收到的消息:         try:
2025-05-17 11:42:00,824 [DEBUG] 处理收到的消息:             group_info = item.text().split(' ', 1)[0]
2025-05-17 11:42:00,824 [DEBUG] 处理收到的消息:             # 统一群组ID格式
2025-05-17 11:42:00,824 [DEBUG] 处理收到的消息:             group_info = str(group_info)
2025-05-17 11:42:00,824 [DEBUG] 处理收到的消息:             if self.current_group and str(self.current_group) == group_info:
2025-05-17 11:42:00,824 [DEBUG] 处理收到的消息:                 self.selecting_group = False
2025-05-17 11:42:00,824 [DEBUG] 处理收到的消息:                 return
2025-05-17 11:42:00,824 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,824 [DEBUG] 处理收到的消息:             self.current_group = group_info
2025-05-17 11:42:00,825 [DEBUG] 处理收到的消息:             # 清除未读标记
2025-05-17 11:42:00,825 [DEBUG] 处理收到的消息:             if group_info in self.unread_groups:
2025-05-17 11:42:00,825 [DEBUG] 处理收到的消息:                 self.unread_groups.remove(group_info)
2025-05-17 11:42:00,825 [DEBUG] 处理收到的消息:                 self.update_group_list()  # 更新群聊列表显示
2025-05-17 11:42:00,825 [DEBUG] 处理收到的消息:             self.tab_widget.setCurrentWidget(self.group_tab)
2025-05-17 11:42:00,825 [DEBUG] 处理收到的消息:             self.group_chat_display.clear()
2025-05-17 11:42:00,825 [DEBUG] 处理收到的消息:             self.anon_nick = None
2025-05-17 11:42:00,825 [DEBUG] 处理收到的消息:             self.group_members_list.clear()
2025-05-17 11:42:00,825 [DEBUG] 处理收到的消息:             # 先获取群聊成员，再获取历史记录
2025-05-17 11:42:00,825 [DEBUG] 处理收到的消息:             self.sock.send(f'GET_GROUP_MEMBERS|{self.current_group}'.encode('utf-8'))
2025-05-17 11:42:00,825 [DEBUG] 处理收到的消息:             self.sock.send(f'GET_GROUP_HISTORY|{self.current_group}'.encode('utf-8'))
2025-05-17 11:42:00,825 [DEBUG] 处理收到的消息:         finally:
2025-05-17 11:42:00,826 [DEBUG] 处理收到的消息:             self.selecting_group = False
2025-05-17 11:42:00,826 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,826 [DEBUG] 处理收到的消息:     def create_group(self):
2025-05-17 11:42:00,826 [DEBUG] 处理收到的消息:         group_name, ok = QInputDialog.getText(self, '创建群聊', '输入群聊名称:')
2025-05-17 11:42:00,826 [DEBUG] 处理收到的消息:         if ok and group_name:
2025-05-17 11:42:00,826 [DEBUG] 处理收到的消息:             self.sock.send(f'CREATE_GROUP|{self.username}|{group_name}'.encode('utf-8'))
2025-05-17 11:42:00,826 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,826 [DEBUG] 处理收到的消息:     def join_group(self):
2025-05-17 11:42:00,826 [DEBUG] 处理收到的消息:         group_id, ok = QInputDialog.getText(self, '加入群聊', '输入群聊ID:')
2025-05-17 11:42:00,826 [DEBUG] 处理收到的消息:         if ok and group_id:
2025-05-17 11:42:00,826 [DEBUG] 处理收到的消息:             self.sock.send(f'JOIN_GROUP|{self.username}|{group_id}'.encode('utf-8'))
2025-05-17 11:42:00,826 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,827 [DEBUG] 处理收到的消息:     def send_group_message(self):
2025-05-17 11:42:00,827 [DEBUG] 处理收到的消息:         msg = self.group_input_edit.text().strip()
2025-05-17 11:42:00,827 [DEBUG] 处理收到的消息:         if not msg or not self.current_group:
2025-05-17 11:42:00,827 [DEBUG] 处理收到的消息:             return
2025-05-17 11:42:00,827 [DEBUG] 处理收到的消息:         if self.group_anon_btn.isChecked():
2025-05-17 11:42:00,827 [DEBUG] 处理收到的消息:             if not self.anon_nick:
2025-05-17 11:42:00,827 [DEBUG] 处理收到的消息:                 anon_nick, ok = QInputDialog.getText(self, '匿名昵称', '输入匿名昵称:')
2025-05-17 11:42:00,827 [DEBUG] 处理收到的消息:                 if not ok or not anon_nick:
2025-05-17 11:42:00,827 [DEBUG] 处理收到的消息:                     return
2025-05-17 11:42:00,827 [DEBUG] 处理收到的消息:                 self.anon_nick = anon_nick
2025-05-17 11:42:00,827 [DEBUG] 处理收到的消息:             self.sock.send(f'GROUP_MSG_ANON|{self.current_group}|{self.anon_nick}|{msg}'.encode('utf-8'))
2025-05-17 11:42:00,827 [DEBUG] 处理收到的消息:             self.append_group_anon_message(self.anon_nick, msg, is_self=True)
2025-05-17 11:42:00,828 [DEBUG] 处理收到的消息:         else:
2025-05-17 11:42:00,828 [DEBUG] 处理收到的消息:             self.sock.send(f'GROUP_MSG|{self.current_group}|{self.username}|{msg}'.encode('utf-8'))
2025-05-17 11:42:00,828 [DEBUG] 处理收到的消息:             self.append_group_message(self.username, msg, is_self=True)
2025-05-17 11:42:00,828 [DEBUG] 处理收到的消息:         self.group_input_edit.clear()
2025-05-17 11:42:00,828 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,828 [DEBUG] 处理收到的消息:     def toggle_anon_mode(self):
2025-05-17 11:42:00,828 [DEBUG] 处理收到的消息:         if not self.group_anon_btn.isChecked():
2025-05-17 11:42:00,828 [DEBUG] 处理收到的消息:             self.anon_nick = None
2025-05-17 11:42:00,828 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,828 [DEBUG] 处理收到的消息:     def append_group_message(self, sender, msg, is_self=False):
2025-05-17 11:42:00,828 [DEBUG] 处理收到的消息:         widget = QWidget()
2025-05-17 11:42:00,828 [DEBUG] 处理收到的消息:         layout = QHBoxLayout()
2025-05-17 11:42:00,829 [DEBUG] 处理收到的消息:         layout.setContentsMargins(0, 0, 0, 0)
2025-05-17 11:42:00,829 [DEBUG] 处理收到的消息:         name_label = QLabel(f'<b>{sender}:</b>')
2025-05-17 11:42:00,829 [DEBUG] 处理收到的消息:         msg_label = QLabel(msg)
2025-05-17 11:42:00,829 [DEBUG] 处理收到的消息:         if is_self:
2025-05-17 11:42:00,829 [DEBUG] 处理收到的消息:             name_label.setStyleSheet('color:blue;')
2025-05-17 11:42:00,829 [DEBUG] 处理收到的消息:         layout.addWidget(name_label)
2025-05-17 11:42:00,829 [DEBUG] 处理收到的消息:         layout.addWidget(msg_label)
2025-05-17 11:42:00,829 [DEBUG] 处理收到的消息:         widget.setLayout(layout)
2025-05-17 11:42:00,829 [DEBUG] 处理收到的消息:         item = QListWidgetItem()
2025-05-17 11:42:00,829 [DEBUG] 处理收到的消息:         self.group_chat_display.addItem(item)
2025-05-17 11:42:00,829 [DEBUG] 处理收到的消息:         self.group_chat_display.setItemWidget(item, widget)
2025-05-17 11:42:00,829 [DEBUG] 处理收到的消息:         item.setSizeHint(widget.sizeHint())
2025-05-17 11:42:00,830 [DEBUG] 处理收到的消息:         self.group_chat_display.scrollToBottom()
2025-05-17 11:42:00,830 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,830 [DEBUG] 处理收到的消息:     def append_group_anon_message(self, anon_nick, msg, is_self=False):
2025-05-17 11:42:00,830 [DEBUG] 处理收到的消息:         widget = QWidget()
2025-05-17 11:42:00,830 [DEBUG] 处理收到的消息:         layout = QHBoxLayout()
2025-05-17 11:42:00,830 [DEBUG] 处理收到的消息:         layout.setContentsMargins(0, 0, 0, 0)
2025-05-17 11:42:00,830 [DEBUG] 处理收到的消息:         name_label = QLabel(f'<b>{anon_nick}(匿名):</b>')
2025-05-17 11:42:00,830 [DEBUG] 处理收到的消息:         msg_label = QLabel(msg)
2025-05-17 11:42:00,830 [DEBUG] 处理收到的消息:         if is_self:
2025-05-17 11:42:00,830 [DEBUG] 处理收到的消息:             name_label.setStyleSheet('color:blue;')
2025-05-17 11:42:00,830 [DEBUG] 处理收到的消息:         layout.addWidget(name_label)
2025-05-17 11:42:00,830 [DEBUG] 处理收到的消息:         layout.addWidget(msg_label)
2025-05-17 11:42:00,830 [DEBUG] 处理收到的消息:         widget.setLayout(layout)
2025-05-17 11:42:00,831 [DEBUG] 处理收到的消息:         item = QListWidgetItem()
2025-05-17 11:42:00,831 [DEBUG] 处理收到的消息:         self.group_chat_display.addItem(item)
2025-05-17 11:42:00,831 [DEBUG] 处理收到的消息:         self.group_chat_display.setItemWidget(item, widget)
2025-05-17 11:42:00,831 [DEBUG] 处理收到的消息:         item.setSizeHint(widget.sizeHint())
2025-05-17 11:42:00,840 [DEBUG] 处理收到的消息:         self.group_chat_display.scrollToBottom()
2025-05-17 11:42:00,840 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,840 [DEBUG] 处理收到的消息:     def send_group_emoji(self, emoji_id):
2025-05-17 11:42:00,841 [DEBUG] 处理收到的消息:         if not self.current_group:
2025-05-17 11:42:00,841 [DEBUG] 处理收到的消息:             return
2025-05-17 11:42:00,841 [DEBUG] 处理收到的消息:         if self.group_anon_btn.isChecked():
2025-05-17 11:42:00,841 [DEBUG] 处理收到的消息:             if not self.anon_nick:
2025-05-17 11:42:00,841 [DEBUG] 处理收到的消息:                 anon_nick, ok = QInputDialog.getText(self, '匿名昵称', '输入匿名昵称:')
2025-05-17 11:42:00,841 [DEBUG] 处理收到的消息:                 if not ok or not anon_nick:
2025-05-17 11:42:00,841 [DEBUG] 处理收到的消息:                     return
2025-05-17 11:42:00,841 [DEBUG] 处理收到的消息:                 self.anon_nick = anon_nick
2025-05-17 11:42:00,841 [DEBUG] 处理收到的消息:             self.sock.send(f'GROUP_MSG_ANON|{self.current_group}|{self.anon_nick}|[EMOJI]{emoji_id}'.encode('utf-8'))
2025-05-17 11:42:00,841 [DEBUG] 处理收到的消息:             self.append_group_anon_emoji(self.anon_nick, emoji_id, is_self=True)
2025-05-17 11:42:00,841 [DEBUG] 处理收到的消息:         else:
2025-05-17 11:42:00,841 [DEBUG] 处理收到的消息:             self.sock.send(f'GROUP_MSG|{self.current_group}|{self.username}|[EMOJI]{emoji_id}'.encode('utf-8'))
2025-05-17 11:42:00,842 [DEBUG] 处理收到的消息:             self.append_group_emoji(self.username, emoji_id, is_self=True)
2025-05-17 11:42:00,842 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,842 [DEBUG] 处理收到的消息:     def append_group_emoji(self, sender, emoji_id, is_self=False):
2025-05-17 11:42:00,842 [DEBUG] 处理收到的消息:         widget = QWidget()
2025-05-17 11:42:00,842 [DEBUG] 处理收到的消息:         layout = QHBoxLayout()
2025-05-17 11:42:00,842 [DEBUG] 处理收到的消息:         layout.setContentsMargins(0, 0, 0, 0)
2025-05-17 11:42:00,842 [DEBUG] 处理收到的消息:         name_label = QLabel(f'<b>{sender}:</b>')
2025-05-17 11:42:00,842 [DEBUG] 处理收到的消息:         img_label = QLabel()
2025-05-17 11:42:00,842 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,842 [DEBUG] 处理收到的消息:         # 尝试从缓存获取表情
2025-05-17 11:42:00,842 [DEBUG] 处理收到的消息:         if not self.get_emoji_from_cache(emoji_id, img_label):
2025-05-17 11:42:00,842 [DEBUG] 处理收到的消息:             # 路径检查和处理
2025-05-17 11:42:00,843 [DEBUG] 处理收到的消息:             path = os.path.join(EMOJI_DIR, emoji_id)
2025-05-17 11:42:00,843 [DEBUG] 处理收到的消息:             if not os.path.exists(path):
2025-05-17 11:42:00,843 [DEBUG] 处理收到的消息:                 print(f"表情文件不存在: {path}")
2025-05-17 11:42:00,843 [DEBUG] 处理收到的消息:                 # 在图像标签显示错误信息
2025-05-17 11:42:00,843 [DEBUG] 处理收到的消息:                 img_label.setText(f"[表情: {emoji_id}]")
2025-05-17 11:42:00,846 [DEBUG] 处理收到的消息:             elif emoji_id.lower().endswith('.gif'):
2025-05-17 11:42:00,846 [DEBUG] 处理收到的消息:                 # 使用定时器确保GIF加载完成
2025-05-17 11:42:00,846 [DEBUG] 处理收到的消息:                 movie = QMovie(path)
2025-05-17 11:42:00,846 [DEBUG] 处理收到的消息:                 img_label.setMovie(movie)
2025-05-17 11:42:00,846 [DEBUG] 处理收到的消息:                 movie.setCacheMode(QMovie.CacheAll)
2025-05-17 11:42:00,846 [DEBUG] 处理收到的消息:                 movie.start()
2025-05-17 11:42:00,847 [DEBUG] 处理收到的消息:                 # 强制处理事件以确保显示更新
2025-05-17 11:42:00,847 [DEBUG] 处理收到的消息:                 QApplication.processEvents()
2025-05-17 11:42:00,847 [DEBUG] 处理收到的消息:             else:
2025-05-17 11:42:00,847 [DEBUG] 处理收到的消息:                 # 静态图片加载
2025-05-17 11:42:00,847 [DEBUG] 处理收到的消息:                 pix = QPixmap(path)
2025-05-17 11:42:00,847 [DEBUG] 处理收到的消息:                 if pix.isNull():
2025-05-17 11:42:00,847 [DEBUG] 处理收到的消息:                     # 如果加载失败，尝试重新加载
2025-05-17 11:42:00,847 [DEBUG] 处理收到的消息:                     print(f"表情加载失败，尝试重新加载: {emoji_id}")
2025-05-17 11:42:00,847 [DEBUG] 处理收到的消息:                     pix = QPixmap(path)
2025-05-17 11:42:00,847 [DEBUG] 处理收到的消息:                 img_label.setPixmap(pix.scaled(40, 40, Qt.KeepAspectRatio, Qt.SmoothTransformation))
2025-05-17 11:42:00,847 [DEBUG] 处理收到的消息:                 # 强制处理事件以确保显示更新
2025-05-17 11:42:00,847 [DEBUG] 处理收到的消息:                 QApplication.processEvents()
2025-05-17 11:42:00,848 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,848 [DEBUG] 处理收到的消息:         if is_self:
2025-05-17 11:42:00,848 [DEBUG] 处理收到的消息:             name_label.setStyleSheet('color:blue;')
2025-05-17 11:42:00,848 [DEBUG] 处理收到的消息:         layout.addWidget(name_label)
2025-05-17 11:42:00,848 [DEBUG] 处理收到的消息:         layout.addWidget(img_label)
2025-05-17 11:42:00,848 [DEBUG] 处理收到的消息:         widget.setLayout(layout)
2025-05-17 11:42:00,848 [DEBUG] 处理收到的消息:         item = QListWidgetItem()
2025-05-17 11:42:00,848 [DEBUG] 处理收到的消息:         self.group_chat_display.addItem(item)
2025-05-17 11:42:00,848 [DEBUG] 处理收到的消息:         self.group_chat_display.setItemWidget(item, widget)
2025-05-17 11:42:00,848 [DEBUG] 处理收到的消息:         item.setSizeHint(widget.sizeHint())
2025-05-17 11:42:00,848 [DEBUG] 处理收到的消息:         self.group_chat_display.scrollToBottom()
2025-05-17 11:42:00,848 [DEBUG] 处理收到的消息:         # 强制刷新UI
2025-05-17 11:42:00,849 [DEBUG] 处理收到的消息:         self.group_chat_display.repaint()
2025-05-17 11:42:00,849 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,849 [DEBUG] 处理收到的消息:     def append_group_anon_emoji(self, anon_nick, emoji_id, is_self=False):
2025-05-17 11:42:00,849 [DEBUG] 处理收到的消息:         widget = QWidget()
2025-05-17 11:42:00,849 [DEBUG] 处理收到的消息:         layout = QHBoxLayout()
2025-05-17 11:42:00,849 [DEBUG] 处理收到的消息:         layout.setContentsMargins(0, 0, 0, 0)
2025-05-17 11:42:00,849 [DEBUG] 处理收到的消息:         name_label = QLabel(f'<b>{anon_nick}(匿名):</b>')
2025-05-17 11:42:00,849 [DEBUG] 处理收到的消息:         img_label = QLabel()
2025-05-17 11:42:00,849 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,849 [DEBUG] 处理收到的消息:         # 尝试从缓存获取表情
2025-05-17 11:42:00,849 [DEBUG] 处理收到的消息:         if not self.get_emoji_from_cache(emoji_id, img_label):
2025-05-17 11:42:00,849 [DEBUG] 处理收到的消息:             # 路径检查和处理
2025-05-17 11:42:00,850 [DEBUG] 处理收到的消息:             path = os.path.join(EMOJI_DIR, emoji_id)
2025-05-17 11:42:00,850 [DEBUG] 处理收到的消息:             if not os.path.exists(path):
2025-05-17 11:42:00,850 [DEBUG] 处理收到的消息:                 print(f"表情文件不存在: {path}")
2025-05-17 11:42:00,850 [DEBUG] 处理收到的消息:                 # 在图像标签显示错误信息
2025-05-17 11:42:00,850 [DEBUG] 处理收到的消息:                 img_label.setText(f"[表情: {emoji_id}]")
2025-05-17 11:42:00,850 [DEBUG] 处理收到的消息:             elif emoji_id.lower().endswith('.gif'):
2025-05-17 11:42:00,850 [DEBUG] 处理收到的消息:                 # 使用定时器确保GIF加载完成
2025-05-17 11:42:00,850 [DEBUG] 处理收到的消息:                 movie = QMovie(path)
2025-05-17 11:42:00,850 [DEBUG] 处理收到的消息:                 img_label.setMovie(movie)
2025-05-17 11:42:00,850 [DEBUG] 处理收到的消息:                 movie.setCacheMode(QMovie.CacheAll)
2025-05-17 11:42:00,850 [DEBUG] 处理收到的消息:                 movie.start()
2025-05-17 11:42:00,850 [DEBUG] 处理收到的消息:                 # 强制处理事件以确保显示更新
2025-05-17 11:42:00,851 [DEBUG] 处理收到的消息:                 QApplication.processEvents()
2025-05-17 11:42:00,851 [DEBUG] 处理收到的消息:             else:
2025-05-17 11:42:00,851 [DEBUG] 处理收到的消息:                 # 静态图片加载
2025-05-17 11:42:00,851 [DEBUG] 处理收到的消息:                 pix = QPixmap(path)
2025-05-17 11:42:00,851 [DEBUG] 处理收到的消息:                 if pix.isNull():
2025-05-17 11:42:00,851 [DEBUG] 处理收到的消息:                     # 如果加载失败，尝试重新加载
2025-05-17 11:42:00,851 [DEBUG] 处理收到的消息:                     print(f"表情加载失败，尝试重新加载: {emoji_id}")
2025-05-17 11:42:00,851 [DEBUG] 处理收到的消息:                     pix = QPixmap(path)
2025-05-17 11:42:00,851 [DEBUG] 处理收到的消息:                 img_label.setPixmap(pix.scaled(40, 40, Qt.KeepAspectRatio, Qt.SmoothTransformation))
2025-05-17 11:42:00,851 [DEBUG] 处理收到的消息:                 # 强制处理事件以确保显示更新
2025-05-17 11:42:00,851 [DEBUG] 处理收到的消息:                 QApplication.processEvents()
2025-05-17 11:42:00,851 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,852 [DEBUG] 处理收到的消息:         if is_self:
2025-05-17 11:42:00,852 [DEBUG] 处理收到的消息:             name_label.setStyleSheet('color:blue;')
2025-05-17 11:42:00,852 [DEBUG] 处理收到的消息:         layout.addWidget(name_label)
2025-05-17 11:42:00,852 [DEBUG] 处理收到的消息:         layout.addWidget(img_label)
2025-05-17 11:42:00,852 [DEBUG] 处理收到的消息:         widget.setLayout(layout)
2025-05-17 11:42:00,852 [DEBUG] 处理收到的消息:         item = QListWidgetItem()
2025-05-17 11:42:00,852 [DEBUG] 处理收到的消息:         self.group_chat_display.addItem(item)
2025-05-17 11:42:00,852 [DEBUG] 处理收到的消息:         self.group_chat_display.setItemWidget(item, widget)
2025-05-17 11:42:00,852 [DEBUG] 处理收到的消息:         item.setSizeHint(widget.sizeHint())
2025-05-17 11:42:00,852 [DEBUG] 处理收到的消息:         self.group_chat_display.scrollToBottom()
2025-05-17 11:42:00,852 [DEBUG] 处理收到的消息:         # 强制刷新UI
2025-05-17 11:42:00,852 [DEBUG] 处理收到的消息:         self.group_chat_display.repaint()
2025-05-17 11:42:00,853 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,853 [DEBUG] 处理收到的消息:     def on_message(self, data):
2025-05-17 11:42:00,853 [DEBUG] 处理收到的消息:         try:
2025-05-17 11:42:00,853 [DEBUG] 处理收到的消息:             print(f"收到消息: {data}")  # 添加调试输出
2025-05-17 11:42:00,853 [DEBUG] 处理收到的消息:             parts = data.split('|')
2025-05-17 11:42:00,853 [DEBUG] 处理收到的消息:             cmd = parts[0]
2025-05-17 11:42:00,853 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,853 [DEBUG] 处理收到的消息:             # 处理私聊历史记录
2025-05-17 11:42:00,853 [DEBUG] 处理收到的消息:             if cmd == 'PRIVATE_HISTORY':
2025-05-17 11:42:00,853 [DEBUG] 处理收到的消息:                 try:
2025-05-17 11:42:00,853 [DEBUG] 处理收到的消息:                     if parts[1] == 'error':
2025-05-17 11:42:00,853 [DEBUG] 处理收到的消息:                         self.append_text_message('[系统]', f'获取历史记录失败: {parts[2]}')
2025-05-17 11:42:00,854 [DEBUG] 处理收到的消息:                         return
2025-05-17 11:42:00,854 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,854 [DEBUG] 处理收到的消息:                     history = parts[1:]
2025-05-17 11:42:00,854 [DEBUG] 处理收到的消息:                     print(f"接收到私聊历史记录: {len(history) // 2}条消息")
2025-05-17 11:42:00,854 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,854 [DEBUG] 处理收到的消息:                     i = 0
2025-05-17 11:42:00,854 [DEBUG] 处理收到的消息:                     while i < len(history):
2025-05-17 11:42:00,854 [DEBUG] 处理收到的消息:                         if i + 1 >= len(history):
2025-05-17 11:42:00,854 [DEBUG] 处理收到的消息:                             print(f"历史记录数据不完整: {history[i:]}")
2025-05-17 11:42:00,854 [DEBUG] 处理收到的消息:                             break
2025-05-17 11:42:00,854 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,854 [DEBUG] 处理收到的消息:                         sender = history[i]
2025-05-17 11:42:00,855 [DEBUG] 处理收到的消息:                         msg = history[i + 1]
2025-05-17 11:42:00,855 [DEBUG] 处理收到的消息:                         print(f"私聊历史: sender={sender}, msg={msg}")
2025-05-17 11:42:00,855 [DEBUG] 处理收到的消息: 
2025-05-17 11:42:00,855 [DEBUG] 处理收到的消息:                         # 显示历史消息
2025-05-17 11:42:00,855 [DEBUG] 处理收到的消息:                         if msg.startswith('[EMOJI]'):
2025-05-17 11:42:00,855 [DEBUG] 处理收到的消息:                             emoji_id = msg[7:]
2025-05-17 11:42:00,855 [DEBUG] 处理收到的消息:                             if sender == self.username:
2025-05-17 11:42:00,855 [DEBUG] 处理收到的消息:                                 self.append_emoji_message('我', emoji_id)
2025-05-17 11:42:00,855 [DEBUG] 处理收到的消息:                             else:
2025-05-17 11:42:00,855 [DEBUG] 处理收到的消息:                                 self.append_emoji_message(sender, emoji_id)
2025-05-17 11:42:00,855 [DEBUG] 处理收到的消息:                         else:
2025-05-17 11:42:00,856 [DEBUG] 处理收到的消息:                             if sender == self.username:ndow()
2025-05-17 11:42:00,856 [DEBUG] 处理收到的消息:     win.show()
2025-05-17 11:42:28,521 [DEBUG] 停止客户端线程
2025-05-17 11:42:28,521 [WARNING] 服务器连接断开
2025-05-17 11:42:28,521 [DEBUG] 客户端线程结束
2025-05-17 11:42:29,254 [DEBUG] 停止客户端线程
